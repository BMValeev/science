project(MenuCameraFHD)
cmake_minimum_required(VERSION 3.0.2)
set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall")
#-fstrict-aliasing -pedantic-errors -pedantic
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)
set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTOSTATICPLUGINS ON)
set(CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}")
set(INCLUDEDIR ${PKG_CONFIG_SYSROOT_DIR}${includedir})
#add_definitions(-DQT_NO_KEYWORDS)
if(NOT DEFINED ${CMAKE_PREFIX_PATH})
    set(CMAKE_PREFIX_PATH /media/eleps/data/Qt5/5.9.6/gcc_64)
endif()
set(Qt5_DIR  ${CMAKE_PREFIX_PATH}/Qt5)

find_library(PTHREAD_LIBRARY pthread)
find_library(GOBJECT_LIBRARY gobject-2.0)
find_package(PkgConfig REQUIRED )
find_package(GTK3 REQUIRED )
find_package(GStreamer REQUIRED )
find_package(Qt5 5.9 COMPONENTS Qml Quick Core QuickControls2 Multimedia  REQUIRED)#Widgets
add_definitions(${QtQml_DEFINITIONS} ${${Qt5Quick_DEFINITIONS}})#${QtWidgets_DEFINITIONS}
qt5_add_resources(QT_RESOURCES resources.qrc)
add_subdirectory(${CMAKE_SOURCE_DIR}/videofiles)
add_subdirectory(${CMAKE_SOURCE_DIR}/c_class)
list(APPEND LIBRARIES
        ${PTHREAD_LIBRARY}
        ${GOBJECT_LIBRARY}
        ${GSTREAMER_LIBRARIES}
        ${GST_LIBRARIES}
        ${GTK3_LIBRARY_DIRS}
        VideoFiles
        HardwareClasses
        #Qt5::Widgets
        Qt5::Qml
        Qt5::Quick
        Qt5::QuickControls2
        Qt5::Core
        Qt5::Multimedia
        )
list(APPEND DIRECTORIES
        ${GSTREAMER_INCLUDE_DIRS}
        ${GST_INCLUDE_DIRS}
        ${GTK3_INCLUDE_DIRS}
        #${Qt5Widgets_INCLUDE_DIRS}
        ${QtQml_INCLUDE_DIRS}
        ${CMAKE_SOURCE_DIR}/c_class
        ${CMAKE_SOURCE_DIR}/videofiles
        )
set(SOURCE_FILES
        QConctroller/videocontrollerbase.cpp
        QConctroller/scene.cpp
        main.cpp
        QConctroller/i2ccontroller.cpp
        QConctroller/devicedata.cpp
        QConctroller/QEnumerableMap.cpp
        QConctroller/Params.cpp
        QConctroller/ButtonTest.cpp
        )
include_directories( ${CMAKE_SOURCE_DIR}  ${DIRECTORIES} )#link_directories(${DIRECTORIES})
add_executable(${PROJECT_NAME}
        ${QT_RESOURCES}
        ${SOURCE_FILES}
        )
target_link_libraries (${PROJECT_NAME} PUBLIC  ${LIBRARIES}  )






install(TARGETS ${PROJECT_NAME}
        RUNTIME DESTINATION bin
        LIBRARY DESTINATION lib
        ARCHIVE DESTINATION lib/static)
